spring.datasource.url=jdbc:postgresql://localhost:5432/gisAPK
spring.datasource.username=postgres
spring.datasource.password=Vfhfajy73
# выводит тела запросов к БД в консоль
spring.jpa.show-sql=true
# что бы схема базы данных создавалась при запуске приложения
spring.jpa.generate-ddl=false
# позволяет задать стратегию формирования БД на основе наших моделей, имеет разные значения (none, create, update и др.).
# update в данном случае значит, что таблицы БД и поля будут созданы на основе наших моделей и буду изменяться вместе с ними.
spring.jpa.hibernate.ddl-auto=update
#добавляется в качестве обходного пути для ошибки "метод org.postgresql.jdbc.PgConnection.createClob () еще не реализован."
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
# спринг возьмет на себя всю работу по хранению сессий пользователя в своих базах
spring.session.jdbc.initialize-schema=always
#сажим спрингу как мы хотим назвать таблицу по хранинию наших сессий
spring.session.jdbc.table-name=SPRING_SESSION

spring.mvc.view.prefix = /WEB-INF/jsp/
spring.mvc.view.suffix = .jsp

#Если мы хотим контролировать максимальный размер загружаемого файла
#spring.servlet.multipart.max-file-size=128KB
#spring.servlet.multipart.max-request-size=128KB

upload.path=D\:\\uploads

#также можем контролировать, включена ли загрузка файлов, и место загрузки файлов
#внимание, что мы использовали $ {java.io.tmpdir} для определения местоположения загрузки, чтобы мы могли использовать
# временное местоположение для разных операционных систем
#spring.servlet.multipart.enabled=true
#spring.servlet.multipart.location=${java.io.tmpdir}

